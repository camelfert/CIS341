@using CIS341_project.Services
@inject IUserService UserService
@model CIS341_project.ViewModels.BlogPostDTO

@{
    ViewData["Title"] = @Model.Title;
    var currentUser = await UserService.GetUserDetailsAsync();
}

<center>
<header>
    <h1>@Model.Title</h1>
    <h2>Published by @Model.PostAuthor on @Model.DatePublished.ToShortDateString() at @Model.DatePublished.ToShortTimeString()</h2>
</header>
<article>
    <p>@Model.Content</p>
        @if (!User.IsInRole("Banned"))
        {
            <div class="reaction-buttons">
                @using (Html.BeginForm("Create", "PostReaction", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.BlogPostId)
                    @Html.Hidden("Type", "Upvote")

                    <button class="btn btn-outline-success btn-sm comment-vote-btn" asp-action="Create" asp-controller="PostReaction" asp-route-blogPostId="@Model.BlogPostId" asp-route-reactionType="Upvote" disabled="@ViewData["UserReactionType"]?.Equals("Upvote")">@ViewData["postUpvoteCount"] 👍</button>
                }

                @using (Html.BeginForm("Create", "PostReaction", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.BlogPostId)
                    @Html.Hidden("Type", "Downvote")

                    <button class="btn btn-outline-danger btn-sm comment-vote-btn" asp-action="Create" asp-controller="PostReaction" asp-route-blogPostId="@Model.BlogPostId" asp-route-reactionType="Downvote" disabled="@ViewData["UserReactionType"]?.Equals("Downvote")">@ViewData["postDownvoteCount"] 👎</button>
                }
            </div>
            <br>
        }

        @if (User.IsInRole("Admin"))
        {
            <br>
            <input class="btn btn-primary comment-action-btn" type="button" value="Edit Post" onclick="location.href='@Url.Action("Edit", "BlogPost", new { id = Model.BlogPostId })'" />
            <input class="btn btn-danger comment-action-btn" type="button" value="Delete Post" onclick="location.href='@Url.Action("Delete", "BlogPost", new { id = Model.BlogPostId })'" />
            @using (Html.BeginForm("ResetPostReactions", "BlogPost", new { id = Model.BlogPostId }, FormMethod.Post, true, new { @class = "post-reaction-reset" }))
            {
                <input class="btn btn-warning comment-action-btn" type="submit" value="Reset Reactions"  />
            }
        }

</article>
<hr/>
</center>
@if (Model.CommentCount == 1)
{
    <h2>@Model.CommentCount comment on "@Model.Title"</h2>
}
else
{
    <h2>@Model.CommentCount comments on "@Model.Title"</h2>
}

<div class="comments-section">
    @foreach (var comment in Model.Comments)
    {
        @Html.Partial("_CommentPartial", comment)
    }
</div>

@if (currentUser.userId != null && !User.IsInRole("Banned"))
{
    <div id="new-comment-form">
        @Html.Partial("_CreateCommentPartial", new CommentDTO { BlogPostId = Model.BlogPostId })
    </div>
}
else if (User.IsInRole("Banned"))
{
    <center>
        <div class="alert alert-danger">You have been banned from commenting and reacting. Contact a Lunchbox Blog admin to appeal your ban.</div>
    </center>
}
else
{
    <p>Please <a href="~/Identity/Account/Login">login</a> or <a href="~/Identity/Account/Register">register an account</a> to leave a comment.</p>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var replyButtons = document.getElementsByClassName('reply-button');
        for (var i = 0; i < replyButtons.length; i++) {
            replyButtons[i].addEventListener('click', function () {
                var buttonIdParts = this.id.split('-');
                var commentId = buttonIdParts[buttonIdParts.length - 1];
                var replyForm = document.getElementById('reply-form-' + commentId);
                replyForm.style.display = replyForm.style.display === 'none' ? 'block' : 'none';
            });
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}