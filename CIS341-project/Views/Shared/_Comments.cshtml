@using CIS341_project.Services
@inject IUserService UserService
@model List<CIS341_project.ViewModels.CommentDTO>

@{
    var currentUser = await UserService.GetUserDetailsAsync();
}

<div class="comments-section">
    @foreach (var comment in Model.Where(c => !c.ParentCommentId.HasValue))
    {
        <div class="comment-bubble">
            <div class="comment-body">
                <p class="comment-author">@comment.AuthorUsername said:</p>
                <p class="comment-content">@comment.CommentContent</p>
            </div>
            <div class="comment-actions">
                <div class="comment-reactions">
                    @using (Html.BeginForm("Create", "CommentReaction", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("CommentId", comment.CommentId)
                        @Html.Hidden("Type", "Upvote")
                        <button class="btn btn-outline-success btn-sm comment-vote-btn" asp-action="Create" asp-controller="CommentReaction" asp-route-reactionType="Upvote" disabled="@ViewData[$"UserCommentReactionType{comment.CommentId}"]?.Equals("Upvote")">@ViewData[$"commentUpvoteCount{comment.CommentId}"] 👍</button>
                    }

                    @using (Html.BeginForm("Create", "CommentReaction", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("CommentId", comment.CommentId)
                        @Html.Hidden("Type", "Downvote")
                        <button class="btn btn-outline-danger btn-sm comment-vote-btn" asp-action="Create" asp-controller="CommentReaction" asp-route-reactionType="Downvote" disabled="@ViewData[$"UserCommentReactionType{comment.CommentId}"]?.Equals("Downvote")">@ViewData[$"commentDownvoteCount{comment.CommentId}"] 👎</button>
                    }
                </div>

                <div class="comment-action-spacer"></div>

                @if (comment.AuthorId == currentUser.userId || User.IsInRole("Admin"))
                {
                    <input class="btn btn-primary comment-action-btn btn-sm" type="button" value="Edit" onclick="location.href='@Url.Action("Edit", "Comment", new { id = comment.CommentId })'" />
                    <input class="btn btn-danger comment-action-btn btn-sm" type="button" value="Delete" onclick="location.href='@Url.Action("Delete", "Comment", new { id = comment.CommentId })'" />
                }

                @if (currentUser.userId != null)
                {
                    <button class="reply-button btn btn-success comment-action-btn btn-sm" id="reply-btn-@comment.CommentId">Reply</button>
                    <div id="reply-form-@comment.CommentId" class="reply-form" style="display:none;">
                        @using (Html.BeginForm("CreateReply", "Comment", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("BlogPostId", ViewData["BlogPostId"])
                            @Html.Hidden("parentCommentId", comment.CommentId)

                            @Html.TextArea("CommentContent", "", new { @class = "form-control comment-input" })
                            @Html.ValidationMessage("CommentContent", "", new { @class = "text-danger" })

                            <input type="submit" value="Reply" class="reply-button" />
                        }
                    </div>
                }

            </div>

        </div>

        @foreach (var reply in Model.Where(c => c.ParentCommentId == comment.CommentId))
        {
            <div class="reply-bubble">
                <div class="comment-body">
                    <p class="comment-author">@reply.AuthorUsername replied:</p>
                    <p class="comment-content">@reply.CommentContent</p>
                </div>
                <div class="reply-actions">
                    <div class="comment-reactions">
                        @using (Html.BeginForm("Create", "CommentReaction", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("CommentId", reply.CommentId)
                            @Html.Hidden("Type", "Upvote")
                            <button class="btn btn-outline-success btn-sm comment-vote-btn" asp-action="Create" asp-controller="CommentReaction" asp-route-reactionType="Upvote" disabled="@ViewData[$"UserCommentReactionType{reply.CommentId}"]?.Equals("Upvote")">@ViewData[$"commentUpvoteCount{reply.CommentId}"] 👍</button>
                        }

                        @using (Html.BeginForm("Create", "CommentReaction", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("CommentId", reply.CommentId)
                            @Html.Hidden("Type", "Downvote")
                            <button class="btn btn-outline-danger btn-sm comment-vote-btn" asp-action="Create" asp-controller="CommentReaction" asp-route-reactionType="Downvote" disabled="@ViewData[$"UserCommentReactionType{reply.CommentId}"]?.Equals("Downvote")">@ViewData[$"commentDownvoteCount{reply.CommentId}"] 👎</button>
                        }
                    </div>

                    <div class="comment-action-spacer"></div>

                    @if (reply.AuthorId == currentUser.userId || User.IsInRole("Admin"))
                    {
                        <input class="btn btn-primary comment-action-btn btn-sm" type="button" value="Edit" onclick="location.href='@Url.Action("Edit", "Comment", new { id = reply.CommentId })'" />
                        <input class="btn btn-danger comment-action-btn btn-sm" type="button" value="Delete" onclick="location.href='@Url.Action("Delete", "Comment", new { id = reply.CommentId })'" />
                    }

                    @if (currentUser.userId != null)
                    {
                        <button class="reply-button btn btn-success comment-action-btn btn-sm" id="reply-btn-@comment.CommentId">Reply</button>
                        <div id="reply-form-@comment.CommentId" class="reply-form" style="display:none;">
                            @using (Html.BeginForm("CreateReply", "Comment", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("BlogPostId", ViewData["BlogPostId"])
                                @Html.Hidden("parentCommentId", comment.CommentId)

                                @Html.TextArea("CommentContent", "", new { @class = "form-control comment-input" })
                                @Html.ValidationMessage("CommentContent", "", new { @class = "text-danger" })

                                <input type="submit" value="Reply" class="reply-button" />
                            }
                        </div>
                    }
                    </div>
                </div>
            }
        }

    @if (currentUser.userId != null)
    {
        @using (Html.BeginForm("Create", "Comment", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.TextArea("CommentContent", "", new { @class = "form-control comment-input", placeholder = "Add a comment..." })
                @Html.ValidationMessage("CommentContent", "", new { @class = "text-danger" })
            </div>

            @Html.Hidden("BlogPostId", ViewData["BlogPostId"])
            @Html.Hidden("ParentCommentId", TempData["ParentCommentId"])

            <br/>
            <button type="submit" class="btn btn-primary">Comment</button>
        }
    }
    else
    {
        <p>Please <a href="~/Identity/Account/Login">login</a> or <a href="~/Identity/Account/Register">register an account</a> to leave a comment.</p>
    }

</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var replyButtons = document.getElementsByClassName('reply-button');
        for (var i = 0; i < replyButtons.length; i++) {
            replyButtons[i].addEventListener('click', function () {
                var commentId = this.id.split('-')[2];
                var replyForm = document.getElementById('reply-form-' + commentId);
                replyForm.style.display = replyForm.style.display === 'none' ? 'block' : 'none';
            });
        }
    });
</script>
