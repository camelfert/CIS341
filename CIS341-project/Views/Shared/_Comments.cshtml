@using CIS341_project.Services
@inject IUserService UserService
@model List<CIS341_project.ViewModels.CommentDTO>
@Html.Hidden("BlogPostId", ViewData["BlogPostId"])
@Html.Hidden("ParentCommentId", TempData["ParentCommentId"])

@{
    var currentUser = await UserService.GetUserDetailsAsync();
}

<div class="comments-section">
    @foreach (var comment in Model)
    {
        <div class="comment-bubble">
            <div class="comment-body">
                <p class="comment-author">@comment.AuthorUsername said:</p>
                <p class="comment-content">@comment.CommentContent</p>
            </div>
            <div class="comment-actions">
                @if (comment.AuthorId == currentUser.userId)
                {
                    <button class="btn btn-primary comment-action-btn btn-sm">Edit</button>
                    <button class="btn btn-danger comment-action-btn btn-sm">Delete</button>
                }

                <button class="reply-button btn btn-success comment-action-btn btn-sm">Reply</button>
            </div>
        </div>

    }

    @using (Html.BeginForm("Create", "Comment", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-group">
            @Html.TextArea("CommentContent", "", new { @class = "form-control comment-input", placeholder = "Add a comment..." })
            @Html.ValidationMessage("CommentContent", "", new { @class = "text-danger" })
        </div>

        @Html.Hidden("BlogPostId", ViewData["BlogPostId"])
        @Html.Hidden("ParentCommentId", TempData["ParentCommentId"])

        <br/>
        <button type="submit" class="btn btn-primary">Comment</button>
    }

</div>